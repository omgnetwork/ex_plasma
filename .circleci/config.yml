version: 2.1
commands:
  install_rust_elixir:
    parameters:
      cache:
        default: ""
        type: string
      dir:
        default: ""
        type: string
    description: Install Erlang and Elixir
    steps:
      - restore_cache:
          key: v4-asdf-install-<<parameters.cache>>
      - run:
          name: Install Erlang and Elixir
          command: |
            cd <<parameters.dir>>
            [ -d ~/.asdf-vm ] || git clone https://github.com/asdf-vm/asdf.git ~/.asdf-vm --branch v0.8.0
            echo 'source ~/.asdf-vm/asdf.sh' >> $BASH_ENV
            source $BASH_ENV
            asdf plugin-add erlang || asdf plugin-update erlang
            asdf plugin-add elixir || asdf plugin-update elixir
            asdf plugin-add rust || asdf plugin-update rust
            asdf install
            mix local.rebar --force && mix local.hex --force
            # setup rust persistence
            # this got us to bin folder
            cd $(dirname $(asdf which rustc))
            cd ../
            echo 'source '$PWD/env >> $BASH_ENV
          no_output_timeout: 2400
      - save_cache:
          key: v4-asdf-install-<<parameters.cache>>
          paths:
            - ~/.asdf
            - ~/.asdf-vm
      - run: |
          cd <<parameters.dir>>
          make install-hex-rebar
      - restore_cache:
          key: v2-mix-specs-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
jobs:
  build:
    working_directory: ~/ex_plasma
    machine:
      image: ubuntu-1604:201903-01
    environment:
      MIX_ENV=test
    steps:
      - checkout
      - install_rust_elixir:
          cache: "build"
          dir: "~/ex_plasma"
      - run: mix local.rebar --force && mix local.hex --force
      - restore_cache:
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run:
          command: mix do deps.get, compile --warnings-as-errors --force
          no_output_timeout: 20m
      - save_cache:
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths:
            - "deps"
            - "_build"

  test:
    working_directory: ~/ex_plasma
    machine:
      image: ubuntu-1604:201903-01
    environment:
      MIX_ENV=test
    steps:
      - checkout
      - install_rust_elixir:
          cache: "test"
          dir: "~/ex_plasma"
      - run: mix local.rebar --force && mix local.hex --force
      - restore_cache:
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run: mix do deps.get, test --exclude skip
      - run: mix coveralls.circle


  credo:
    working_directory: ~/ex_plasma
    machine:
      image: ubuntu-1604:201903-01
    environment:
      MIX_ENV=test
    steps:
      - checkout
      - run: mix local.rebar --force && mix local.hex --force
      - restore_cache:
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run: mix do deps.get, credo, format --check-formatted --dry-run

  conformance:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/ex_plasma
    steps:
      - checkout
      - install_rust_elixir:
          cache: "conformance"
          dir: "~/ex_plasma"
      - run: make up-mocks
      - restore_cache:
          key: v1-conformance-deps-cache-{{ checksum "mix.lock" }}
      - run: mix do deps.get, compile --warnings-as-errors --ignore-module-conflict --force
      - save_cache:
          key: v1-conformance-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths:
            - "deps"
            - "_build"
            - "~/.cargo/"
      - run: mix test --only conformance

  dialyzer:
    working_directory: ~/ex_plasma
    machine:
      image: ubuntu-1604:201903-01
    environment:
      MIX_ENV=dev
    steps:
      - checkout
      - install_rust_elixir:
          cache: "dialyzer"
          dir: "~/ex_plasma"
      - run: mix local.rebar --force && mix local.hex --force
      - restore_cache:
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - restore_cache:
          key: v1-dialyzer-plts-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run:
          name: Unpack PLT cache
          command: |
            mkdir -p _build/dev
            cp plts/dialyxir*.plt _build/dev/ || true
            mkdir -p ~/.mix
            cp plts/dialyxir*.plt ~/.mix/ || true
      - run:
          command: mix do deps.get, dialyzer --halt-exit-status
          no_output_timeout: 30m
      - run:
          name: Pack PLT cache
          command: |
            mkdir -p plts
            cp _build/dev/dialyxir*.plt plts/
            cp ~/.mix/dialyxir*.plt plts/
      - save_cache:
          key: v1-dialyzer-plts-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths:
            - "plts"
  integration:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/ex_plasma
    steps:
      - checkout
      - install_rust_elixir:
          cache: "integration"
          dir: "~/ex_plasma"
      - run: mix local.rebar --force && mix local.hex --force
      - run: make up
      - restore_cache:
          key: v1-conformance-deps-cache-{{ checksum "mix.lock" }}
      - run: mix do deps.get, compile --warnings-as-errors --ignore-module-conflict --force
      - save_cache:
          key: v1-conformance-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths:
            - "deps"
            - "_build"
      - run: mix test --only integration
workflows:
  version: 2
  build-test-lint:
    jobs:
      - build
      - test:
          requires:
            - build
      - credo:
          requires:
            - build
      - dialyzer:
          requires:
            - build
      - conformance
